#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Mi primera configuración
# #+DATE: <2017-01-31 mar>
#+AUTHOR: Rock Neurotiko & Ignacio Ballesteros
# #+EMAIL: miguelglafuente@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.1 (Org mode 9.0.3)
#+LATEX_CLASS_OPTIONS: [a4paper,hidelinks]
#+LATEX_CLASS_OPTIONS: [...,hidelinks]

#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: linear
#+REVEAL_THEME: league
#+REVEAL_HLEVEL: 1
#+REVEAL_EXTRA_CSS: ./acm.css
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="ACM Presentation.">
# #+REVEAL_SLIDE_FOOTER: <img src="./LogoACM_svg.svg" width="180" height="180">
#+REVEAL_POSTAMBLE: <p> Created by rockneurotiko. </p>
#+REVEAL_PLUGINS: (markdown notes zoom classList)
#+REVEAL_EXTRA_JS: { src: './acm.js', async: true }
#+REVEAL_TITLE_SLIDE_TEMPLATE: <div></div>

#+OPTIONS: toc:nil


* Introducción a emacs

** Que es?
   - Editor de texto
   - Configurable / Programable
   - Completamente libre (GNU Emacs GPL, Stallman style)
   - Raton, que raton?

** Opiniones
   - Es un entorno donde creas tu propia herramienta como quieras. Es divertido como LEGO, hay infinitos modos de jugar con ello. (reddit)
   - I like Emacs for the same reason I like the piano.

     My knowledge and learning will take me far.

     I used both 30 years ago.

     I will use both 30 years from now if I am still around.

     Such reliable tools help you stop thinking about tools, and start creating the art or engineering that is your gift to the rest of us.

** Opiniones propias
   - Es una herramienta que me permite abstraerme de todo y realizar
     todo en un lugar, y si no tengo algo, lo puedo crear. (Rock)
   - Las dinámicas de trabajo comunes se amparan en un entorno
     único. Con Emacs puedo experimentar, conocer, y aprender con más
     libertad. (Ignacio)

** Comandos
   - Control (C)
   - Alt (Meta) (M)
   - Windows (Super) (s)
   - M-x (Simples)
   - C-x C-s (Multiples combinadas)
   - C-h k (Con letras sueltas)

** Moverse
   - C-p, flecha arriba
   - C-n, flecha abajo
   - C-b, flecha izquierda
   - C-f, flecha derecha
   - C-s / C-r, buscar

** Atajos basicos
  - C-x C-c
  - C-x C-s (Guardar)
  - M-x
  - C-h [f | m | v]

* Introducción a elisp

** Parentesis
   #+BEGIN_SRC elisp :tangle no
   (todo (va (entre (parentesis))))
   #+END_SRC

  - Primera "palabra" es el comando, todo lo demas son argumentos

  #+BEGIN_SRC elisp :tangle no
  (shell-command "ls")
  #+END_SRC

** Ejecutar
   Para ejecutar elisp en emacs, C-x C-e

   #+BEGIN_SRC elisp :tangle no
   (+ 1 2 3 4)

   (/ (* 4 10) (+ 5 10))
   #+END_SRC

* Dónde encontrar paquetes!

  - Melpa (https://melpa.org/)
  - Github
  - Google

* Sin configuración
** Lo facil...

  http://emacs-bootstrap.com/

** Configurar melpa

   En ~/.emacs.d/init.el

   #+BEGIN_SRC elisp :tangle no
   (require 'package) ;; You might already have this line
   (add-to-list 'package-archives
   '("melpa" . "https://melpa.org/packages/"))
   (when (< emacs-major-version 24)
   ;; For important compatibility libraries like cl-lib
   (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
   (package-initialize) ;; You might already have this line
   #+END_SRC

** Modulos a instalar

**** Tema
 - zenburn-theme
**** Multi-term
 - multi-term
**** Reveal
 - ox-reveal
**** Undo
 - undo-tree
**** git gutter
 - git-gutter-fringe+
**** yasnippet
 - yasnippet
**** magit
 - magit
**** spotify
 - spotify
**** Elixir
 - elixir-mode
 - alchemist
**** Scala
 - scala-mode
**** Python
 - elpy

* Mi primera configuración

 #+BEGIN_SRC elisp :tangle init.el

  (when (>= emacs-major-version 24)
    (require 'package)
    (add-to-list
     'package-archives
     '("melpa" . "http://melpa.org/packages/") t)
    (add-to-list
     'package-archives
     '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/") t)
    (package-initialize))
#+END_SRC

** Modulos a instalar

**** Tema
- zenburn-theme
**** Multi-term
- multi-term
**** Reveal
- ox-reveal
**** Undo
- undo-tree
**** git gutter
- git-gutter-fringe+
**** yasnippet
- yasnippet
**** magit
- magit
**** spotify
- spotify
**** Elixir
- elixir-mode
- alchemist
**** Scala
- scala-mode
**** Python
- elpy

* Configuración modular
*** use-package

  #+BEGIN_SRC elisp :tangle init.el

  (unless (featurep 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    )

  #+END_SRC

*** Modulos

**** Tema (zenburn-theme)
    #+BEGIN_NOTES
    #+BEGIN_SRC elisp :tangle no
    (use-package zenburn-theme
    :ensure t
    :config (load-theme 'zenburn t))
    #+END_SRC
    #+END_NOTES
**** Multi-term
    #+BEGIN_NOTES
    #+BEGIN_SRC elisp :tangle no
    (use-package multi-term
    :ensure t
    :init (setq multi-term-buffer-name "term"
     multi-term-program "/bin/zsh")
    :bind (("<f5>" . multi-term)
           ("<C-next>" . multi-term-next)
           ("<C-prior>" . multi-term-prev)))
    #+END_SRC
           #+END_NOTES

**** Reveal (ox-reveal)
    #+BEGIN_NOTES
    #+BEGIN_SRC elisp :tangle no
    (use-package ox-reveal
    :ensure t
    :init (setq org-reveal-root (concat "file://" (expand-file-name "~/.emacs.d/plugins/revealjs"))))
    #+END_SRC
    #+END_NOTES

**** Undo (undo-tree)
    #+BEGIN_NOTES
    #+BEGIN_SRC elisp :tangle no
    (use-package undo-tree
    ;; :disabled t
    :defer t
    :ensure t
    :diminish undo-tree-mode
    :init (defalias 'redo 'undo-tree-redo)
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)
    :bind (("C-z" . undo)
           ("C-S-z" . redo)))
    #+END_SRC
           #+END_NOTES

**** git gutter (git-gutter-fringe+)
    #+BEGIN_NOTES
    #+BEGIN_SRC elisp :tangle no
    (use-package git-gutter-fringe+
    :ensure t
    :diminish git-gutter+-mode
    :init
    (setq-default indicate-buffer-boundaries 'left)
    (setq-default indicate-empty-lines +1)
    :config
    (global-git-gutter+-mode 1)
    (git-gutter-fr+-minimal))
    #+END_SRC
    #+END_NOTES

**** yasnippet
    #+BEGIN_NOTES
    #+BEGIN_SRC elisp :tangle no
    (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
    (yas-global-mode 1))
    #+END_SRC
    #+END_NOTES

**** magit
    #+BEGIN_NOTES
    #+BEGIN_SRC elisp :tangle no
    (use-package magit
    :ensure t
    :init
    (setq magit-last-seen-setup-instructions "1.4.0")
    :bind (("C-c g" . magit-status)
    ("C-c C-c" . with-editor-finish)
    ("C-c C-k" . with-editor-cancel)))
    #+END_SRC
    #+END_NOTES

**** spotify
    #+BEGIN_NOTES
    #+BEGIN_SRC elisp :tangle no
    (use-package spotify
    :ensure t
    :config (spotify-enable-song-notifications)
    :bind (("C-c s n" . spotify-next)
           ("C-c s p" . spotify-previous)
           ("C-c s t" . spotify-playpause)
           ("C-c s c" . spotify-current)
           ("C-c s v" . spotify-enable-song-notifications)
           ("C-c s m" . spotify-disable-song-notifications)))
    #+END_SRC
           #+END_NOTES

**** Elixir (elixir-mode && alchemist)
    #+BEGIN_NOTES
    #+BEGIN_SRC elisp :tangle no
    (use-package alchemist
    :ensure t)
    #+END_SRC
    #+END_NOTES

**** Scala (scala-mode)
    #+BEGIN_NOTES
    #+BEGIN_SRC elisp :tangle no
    (use-package scala-mode
    :ensure t)

    (use-package ensime
    :ensure t
    :demand t
    :pin melpa-stable
    :config
    (add-hook 'scala-mode-hook 'ensime-scala-mode-hook))
    #+END_SRC
    #+END_NOTES

**** Python (elpy)
    #+BEGIN_NOTES
    #+BEGIN_SRC elisp :tangle no
      (use-package elpy
        :ensure t
        :config
        (elpy-enable))
    #+END_SRC
        #+END_NOTES

* Configuración basada en org
** ¿Qué es org-mode?
/Modo/ de Emacs para editar texto plano orientado a notas.

*** (Parece poca cosa)

*** Para una lista más extensa :: http://orgmode.org/features.html
** ¿Para qué lo vamos a usar hoy?
*** ORGanización de nuestra configuración.
- ~org-babel-tangle~
  - ~C-c C-v t~
  - En este fichero (~presentacion.org~)
- Ya tenemos nuestro código en el fichero elegido :)
- [[./init.el]]
** 
- [[./ejemplo_org.el][Ejemplo]] de configuración con /org/.
* Gracias
